[1. ] == ![]   // true

Reason : 
// Why?

// ![] â†’ false (because [] is truthy).

// Now it becomes [] == false.

// JS tries to convert [] to a number â†’ 0.

// false also â†’ 0.

// So 0 == 0 â†’ âœ… true.


2. [] == ""
// ðŸ‘‰ Why?

// [] gets converted to string â†’ "".

// "" == "" â†’ âœ… true.


3. [] == 0;
// ðŸ‘‰ Why?

// [] becomes "".

// "" â†’ 0 (when coerced to number).

// 0 == 0 â†’ âœ… true.


4. "" == 0   // true
// Why?

// "" â†’ 0 (numeric conversion).

// 0 == 0 â†’ âœ… true.

5. null == undefined   // true
// ðŸ‘‰ Special rule in JS: null and undefined are only equal to each other when using ==.
// But:null === undefined   // true

6. NaN == NaN   // false
    // ðŸ‘‰ By definition, NaN is not equal to anything, even itself.
    // To check, use:

    // Number.isNaN(NaN)  // true


    âš¡ Summary of the madness:

// [] == ![] // true

// [] == "" // true

// [] == 0 // true

// "" == 0 // true

// "0" == false // true

// null == undefined // true

// NaN == NaN // false

// null == undefined   // true
// null == 0           // false
// undefined == 0      // false




// âœ… Step 3. One is Boolean

// If one side is boolean, convert it to a number:

// true â†’ 1
// false â†’ 0


// Example:

// true == 1   // true
// false == 0  // true
// "0" == false // true (because "0" â†’ 0, false â†’ 0)


// âœ… Step 4. One is String and other is Number

// Convert the string to number, then compare:

// "42" == 42   // true
// "0" == 0     // true
// "" == 0      // true


// âœ… Step 5. One is Object and other is Primitive

// If one is an object (array, function, etc.) and the other is a primitive (string/number/boolean):

// Convert the object to a primitive by calling valueOf() or toString().

// Examples:

// [] == ""     // true  ( [] â†’ "" )
// [] == 0      // true  ( [] â†’ "" â†’ 0 )
// [1] == "1"   // true  ( [1] â†’ "1" )




ðŸ”„ Flowchart for a == b
Start: a == b ?
   â”‚
   â”œâ”€â”€ Same Type? â”€â”€â–º Compare like ===
   â”‚                   â”‚
   â”‚                   â””â”€â”€ true/false
   â”‚
   â”œâ”€â”€ null / undefined combo?
   â”‚         â””â”€â”€ true
   â”‚
   â”œâ”€â”€ One is String, other Number?
   â”‚         â””â”€â”€ Convert String â†’ Number, compare
   â”‚
   â”œâ”€â”€ One is Boolean?
   â”‚         â””â”€â”€ Convert Boolean â†’ Number (true=1, false=0), compare
   â”‚
   â”œâ”€â”€ One is Object, other Primitive?
   â”‚         â””â”€â”€ Convert Object â†’ Primitive, compare again
   â”‚
   â””â”€â”€ Else
             â””â”€â”€ false



